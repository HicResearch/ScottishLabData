} else {
if (dim(data[data$code==rc & data$valueUnit==r_u,])[1]>0) {
data[data$code==rc & data$valueUnit==r_u,"valueQuantity"] <- as.double(r_r)*as.double(data[data$code==rc & data$valueUnit==r_u,"valueQuantity"])
}
}
}
}
if (dim(data[data$code==rc,])[1]>0)
data[data$code==rc,"valueUnit"] <- unitinfor$Unit
}
return(data)
}
# censored value function
CensoredValueFunction <- function(data) {
t <- data
t[grepl(">", t$valueString, ignore.case = TRUE),"valueQuantity"] <- t[grepl(">", t$valueString, ignore.case = TRUE),"valueQuantity"]*2
t[grepl("<", t$valueString, ignore.case = TRUE),"valueQuantity"] <- t[grepl("<", t$valueString, ignore.case = TRUE),"valueQuantity"]/2
return(t)
}
######################################
######## install packages ############
######################################
install.packages("DBI")
install.packages("odbc")
install.packages("dplyr")
install.packages("dbplyr")
install.packages("haven")
install.packages("writexl")
install.packages("tidyverse")
install.packages("plotly")
install.packages("ggvenn")
library(ggvenn)
library(odbc)
library(DBI)
library(dplyr)
library(dbplyr)
library(readxl)
library(plotly)
install.packages("DBI")
install.packages("DBI")
con <- dbConnect(odbc(),
Driver = "SQL Server",
Server = "W-007482\SQLEXPRESS",
#Set up the connection
con <- dbConnect(odbc(),
Driver = "SQL Server",
Server = "W-007482\SQLEXPRESS",
#Set up the connection
con <- dbConnect(odbc(),
Driver = "SQL Server",
Server = "W-007482/\SQLEXPRESS",
#Set up the connection
con <- dbConnect(odbc(),
Driver = "SQL Server",
Server = "localhost",
Database = "example", TrustServerCertificate="Yes")
rlang::last_trace()
con <- dbConnect(odbc(),
Driver = "SQL Server",
Server = "localhost",
Database = "example",
UID = "CGao001",
PWD = rstudioapi::askForPassword("Database password"),
TrustServerCertificate="Yes")
con <- dbConnect(odbc(),
Driver = "SQL Server",
Server = "localhost",
Database = "example",
UID = "examplelogin",
PWD = rstudioapi::askForPassword("Database password"),
TrustServerCertificate="Yes")
con <- dbConnect(odbc(),
Driver = "SQL Server",
Server = "W-007482\SQLEXPRESS",
con <- dbConnect(odbc(),
Driver = "SQL Server",
Server = "W-007482\\SQLEXPRESS",
Database = "example",
UID = "examplelogin",
PWD = rstudioapi::askForPassword("Database password"),
TrustServerCertificate="Yes")
#p value function
p_value_calculate_kruskal <- function(D) {
if (dim(D)[1]!=0 & length(unique(D$From))>1 & length(unique(D$t))>1){
t <- kruskal.test(D$t ~ D$From, data = D)
if (t[["p.value"]]<0.05) {
return("< 0.05")
} else {
return(round(t[["p.value"]],3))
}} else {
return("NA")
}
}
#p value function
p_value_calculate_mann <- function(D) {
if (dim(D)[1]!=0 & length(unique(D$From))>1 & length(unique(D$t))>1){
t <- wilcox.test(D$t ~ D$From, data = D)
if (t[["p.value"]]<0.05) {
return("< 0.05")
} else {
return(round(t[["p.value"]],3))
}} else {
return("NA")
}
}
#band weith function
bandwidthfunction <- function(t) {
if (sum(abs(round(t)-t))/length(t)<0.1){
return(10)
} else if (sum(abs(round(t,1)-t))/length(t)<0.01) {
return(1)
} else if (sum(abs(round(t,2)-t))/length(t)<0.001){
return(0.1)
} else {
return((max(t)-min(t))/50)
}
}
#outlier cut function
outlierCutFunction <- function(data) {
t <- data$valueQuantity
t <- t[!is.na(t)]
#outlier cut
Q <- quantile(as.double(t), probs=c(.25, .75), na.rm = TRUE)
iqr <- IQR(as.double(t), na.rm = TRUE)
up <- Q[2]+5*iqr   # Upper Range
low <- Q[1]-5*iqr   # Lower Range
if (length(t)!=0&iqr!=0) {
data <- data[as.double(data$valueQuantity) > low & as.double(data$valueQuantity) < up,]
}
return(data)
}
#unit transfer function
unitTransferFunction <- function(data,unitinfor,rc) {
if (is.na(unitinfor$Rule)==TRUE) {
data[data$code==rc,"valueUnit"] <- unitinfor$Unit
} else {
data <- data[!is.na(data$valueUnit),]        #remove na
data <- data[!is.na(data$valueQuantity),]    #remove na
rules <- strsplit(as.character(unitinfor$Rule),";")
for (rulenumber in 1:length(rules[[1]])) {
r=rules[[1]][rulenumber]
if (r=="exclude from analysis") {
data <- data[0, ]
} else {
r_u <- lapply(strsplit(as.character(r)," "),function(x) x[pmax(0,which(x=="value")-1)])
r_r <- lapply(strsplit(as.character(r)," "),function(x) x[pmax(0,which(x=="value")+1)])
if (r_r=="delete") {
data <- data[!data$valueUnit==r_u,]
} else {
if (dim(data[data$code==rc & data$valueUnit==r_u,])[1]>0) {
data[data$code==rc & data$valueUnit==r_u,"valueQuantity"] <- as.double(r_r)*as.double(data[data$code==rc & data$valueUnit==r_u,"valueQuantity"])
}
}
}
}
if (dim(data[data$code==rc,])[1]>0)
data[data$code==rc,"valueUnit"] <- unitinfor$Unit
}
return(data)
}
# censored value function
CensoredValueFunction <- function(data) {
t <- data
t[grepl(">", t$valueString, ignore.case = TRUE),"valueQuantity"] <- t[grepl(">", t$valueString, ignore.case = TRUE),"valueQuantity"]*2
t[grepl("<", t$valueString, ignore.case = TRUE),"valueQuantity"] <- t[grepl("<", t$valueString, ignore.case = TRUE),"valueQuantity"]/2
return(t)
}
##################################
#### Connecting to the SQL Server ####
######################################
#List drivers -check which ones are available
#sort(unique(odbcListDrivers()[[1]]))
######################################
######################################
#Set up the connection
con <- dbConnect(odbc(),
Driver = "SQL Server",
Server = "W-007482\\SQLEXPRESS",
Database = "example",
UID = "examplelogin",
PWD = rstudioapi::askForPassword("Database password"),
TrustServerCertificate="Yes")
library(ggvenn)
library(odbc)
library(DBI)
library(dplyr)
library(dbplyr)
library(readxl)
library(plotly)
#####################################
#### Connecting to the SQL Server ####
######################################
#List drivers -check which ones are available
#sort(unique(odbcListDrivers()[[1]]))
######################################
######################################
#Set up the connection
con <- dbConnect(odbc(),
Driver = "SQL Server",
Server = "W-007482\\SQLEXPRESS",
Database = "example",
UID = "examplelogin",
PWD = rstudioapi::askForPassword("Database password"),
TrustServerCertificate="Yes")
rlang::last_trace()
#Set up the connection
con <- dbConnect(odbc(),
Driver = "SQL Server",
Server = "localhost",
Database = "example",
UID = "examplelogin",
PWD = rstudioapi::askForPassword("Database password"),
TrustServerCertificate="Yes")
?dbConnect
#Set up the connection
con <- dbConnect(odbc(),
Driver = "SQL Server",
Server = "localhost\\SQLEXPRESS",
Database = "example",
UID = "examplelogin",
PWD = rstudioapi::askForPassword("Database password"),
TrustServerCertificate="Yes")
#Set up the connection
con <- dbConnect(odbc(),
Driver = "SQL Server",
Server = "localhost\\SQLEXPRESS",
Database = "DUNDEE\\CGao001",
UID = "examplelogin",
PWD = rstudioapi::askForPassword("Database password"),
TrustServerCertificate="Yes")
#Set up the connection
con <- dbConnect(odbc(),
Driver = "SQL Server",
Server = "localhost\\SQLEXPRESS",
Database = "example",
UID = "DUNDEE\\CGao001",
PWD = rstudioapi::askForPassword("Database password"),
TrustServerCertificate="Yes")
#Set up the connection
con <- dbConnect(odbc(),
Driver = "SQL Server",
Server = "localhost\\SQLEXPRESS",
Database = "example",
UID = "example",
PWD = rstudioapi::askForPassword("Database password"),
TrustServerCertificate="Yes")
#Set up the connection
con <- dbConnect(odbc(),
Driver = "SQL Server",
Server = "localhost\\SQLEXPRESS",
Database = "example",
UID = "examplelogin",
PWD = rstudioapi::askForPassword("Database password"),
TrustServerCertificate="Yes")
#NOTE: Replace 'SE04_53_FP' with the table name.
TblRead <- DBI::Id(
schema = "dbo",
table = "HIC_ReadCodeAggregates")
TblRead2 <- DBI::Id(
schema = "dbo",
table = "Glasgow_ReadCodeAggregates")
TblRead3 <- DBI::Id(
schema = "dbo",
table = "Lothian_ReadCodeAggregates")
TblRead4 <- DBI::Id(
schema = "dbo",
table = "DaSH_ReadCodeAggregates")
#This reads the above table as defined under TblRead
HIC_ReadCodeAggregates <- dbReadTable(con, TblRead)
Glasgow_ReadCodeAggregates <- dbReadTable(con, TblRead2)
Lothian_ReadCodeAggregates <- dbReadTable(con, TblRead3)
DaSH_ReadCodeAggregates <- dbReadTable(con, TblRead4)
dim(HIC_ReadCodeAggregates) #size of DF
save(HIC_ReadCodeAggregates,Glasgow_ReadCodeAggregates,Lothian_ReadCodeAggregates,DaSH_ReadCodeAggregates,file = "./data/ReadCodeAggregates.RData")
?dir.create
dir.create(data)
mainDir <- "./"
subDir <- "data"
dir.create(file.path(mainDir, subDir), showWarnings = FALSE)
save(HIC_ReadCodeAggregates,Glasgow_ReadCodeAggregates,Lothian_ReadCodeAggregates,DaSH_ReadCodeAggregates,file = "./data/ReadCodeAggregates.RData")
##################################################################
################# load data table ##################################
####################################################################
#NOTE: Replace 'FHIR_HIC' with the table name.
TblRead <- DBI::Id(
schema = "dbo",
table = "FHIR_HIC")
TblRead2 <- DBI::Id(
schema = "dbo",
table = "FHIR_Glasgow")
TblRead3 <- DBI::Id(
schema = "dbo",
table = "FHIR_Lothian")
TblRead4 <- DBI::Id(
schema = "dbo",
table = "FHIR_DaSH")
#This reads the above table as defined under TblRead
D <- dbReadTable(con, TblRead)
save(D, file = "./data/FHIR_HIC.RData")
rm(D)
D <- dbReadTable(con, TblRead2)
save(D, file = "./data/FHIR_Glasgow.RData")
rm(D)
D <- dbReadTable(con, TblRead3)
save(D, file = "./data/FHIR_Lothian.RData")
rm(D)
D <- dbReadTable(con, TblRead4)
save(D, file = "./data/FHIR_DaSH.RData")
rm(D)
# 14/12/2022
############# load demography data table #######################
####################################################################
TblRead <- DBI::Id(
schema = "dbo",
table = "demognat")
Demography <- dbReadTable(con, TblRead)
#### tt will have the duplicated records ####
p_dup <- Demography[duplicated(Demography$PROCHI), "PROCHI"]
tt <- Demography[Demography$PROCHI %in% p_dup,]
#### there are 361 patients has two date of birth thus two records
#### select the records based on the date of birth
Demography <- Demography %>% group_by(PROCHI) %>% top_n(1, anon_date_of_birth)
View(Demography)
############## load demography data table #######################
####################################################################
TblRead <- DBI::Id(
schema = "dbo",
table = "demognat")
Demography <- dbReadTable(con, TblRead)
#### tt will have the duplicated records ####
p_dup <- Demography[duplicated(Demography$PROCHI), "PROCHI"]
tt <- Demography[Demography$PROCHI %in% p_dup,]
#### there are 361 patients has two date of birth thus two records
#### select the records based on the date of birth
Demography <- Demography %>% group_by(PROCHI) %>% top_n(1, anon_date_of_birth)
############### load demography data table #######################
####################################################################
TblRead <- DBI::Id(
schema = "dbo",
table = "demognat")
Demography <- dbReadTable(con, TblRead)
#### tt will have the duplicated records ####
p_dup <- Demography[duplicated(Demography$PROCHI), "PROCHI"]
tt <- Demography[Demography$PROCHI %in% p_dup,]
#### there are 361 patients has two date of birth thus two records
#### select the records based on the date of birth
Demography <- Demography %>% group_by(PROCHI) %>% top_n(1, anon_date_of_birth)
#### select the records based on the from
Demography <- Demography %>% group_by(PROCHI) %>% top_n(1, From)
## clear the workspace ######
rm(list = ls()); gc()
###################################
######## load data ################
###################################
#### Connecting to the SQL Server ####
#con <- dbConnect(odbc(),
#                 Driver = "SQL Server",
#                 Server = "sql.hic-tre.dundee.ac.uk",
#                 Database = "RDMP_3564_ExampleData",
#                 UID="project-3564", PWD="", TrustServerCertificate="Yes")
con <- dbConnect(odbc(),
Driver = "SQL Server",
Server = "localhost\\SQLEXPRESS",
Database = "example",
UID = "examplelogin",
PWD = rstudioapi::askForPassword("Database password"),
TrustServerCertificate="Yes")
TblRead <- DBI::Id(
schema = "dbo",
table = "HIC_ReadCodeAggregates")
TblRead2 <- DBI::Id(
schema = "dbo",
table = "Glasgow_ReadCodeAggregates")
TblRead3 <- DBI::Id(
schema = "dbo",
table = "Lothian_ReadCodeAggregates")
TblRead4 <- DBI::Id(
schema = "dbo",
table = "DaSH_ReadCodeAggregates")
#This reads the above table as defined under TblRead
HIC_ReadCodeAggregates <- dbReadTable(con, TblRead)
Glasgow_ReadCodeAggregates <- dbReadTable(con, TblRead2)
Lothian_ReadCodeAggregates <- dbReadTable(con, TblRead3)
DaSH_ReadCodeAggregates <- dbReadTable(con, TblRead4)
###################################
###### venn diagram ###############
###################################
Lothian_ReadCodeAggregates <- Lothian_ReadCodeAggregates[order(-Lothian_ReadCodeAggregates$recordCount),]
HIC_ReadCodeAggregates <- HIC_ReadCodeAggregates[order(-HIC_ReadCodeAggregates$recordCount),]
Glasgow_ReadCodeAggregates <- Glasgow_ReadCodeAggregates[order(-Glasgow_ReadCodeAggregates$recordCount),]
DaSH_ReadCodeAggregates <- DaSH_ReadCodeAggregates[order(-DaSH_ReadCodeAggregates$recordCount),]
### calculate how many unique test across SHs##
########### 09/14/2023 ########################
all <- rbind(Lothian_ReadCodeAggregates, HIC_ReadCodeAggregates, Glasgow_ReadCodeAggregates, DaSH_ReadCodeAggregates)
length(unique(all$code))
t <- c(HIC_ReadCodeAggregates[1:100,"code"],Glasgow_ReadCodeAggregates[1:100,"code"],Lothian_ReadCodeAggregates[1:100,"code"],DaSH_ReadCodeAggregates[1:100,"code"])
t <- unique(t)
t <- t[!t==""]    #180 codes
selectedCodes <- t
save(selectedCodes, file = "./data/selectedCodes.RData")
x <- list(
HIC=HIC_ReadCodeAggregates[HIC_ReadCodeAggregates[,"code"] %in% t,"code"],  # 135
Glasgow=Glasgow_ReadCodeAggregates[Glasgow_ReadCodeAggregates[,"code"] %in% t,"code"],  #128
DataLoch=Lothian_ReadCodeAggregates[Lothian_ReadCodeAggregates[,"code"] %in% t,"code"],  #121
DaSH=DaSH_ReadCodeAggregates[DaSH_ReadCodeAggregates[,"code"] %in% t,"code"]   #126
)
tt <- ggvenn(x,
fill_color =c("#0073C2FF","#EFC000FF","#868686FF","#9900FF"),
stroke_size = 0.5, set_name_size = 4,  show_percentage = FALSE)
sum(HIC_ReadCodeAggregates[HIC_ReadCodeAggregates[,"code"] %in% t,"recordCount"])/sum(HIC_ReadCodeAggregates[,"recordCount"])  #0.989
sum(Glasgow_ReadCodeAggregates[Glasgow_ReadCodeAggregates[,"code"] %in% t,"recordCount"])/sum(Glasgow_ReadCodeAggregates[,"recordCount"])  #0.974
sum(Lothian_ReadCodeAggregates[Lothian_ReadCodeAggregates[,"code"] %in% t,"recordCount"])/sum(Lothian_ReadCodeAggregates[,"recordCount"])  #0.985
sum(DaSH_ReadCodeAggregates[DaSH_ReadCodeAggregates[,"code"] %in% t,"recordCount"])/sum(DaSH_ReadCodeAggregates[,"recordCount"])  #0.995
#merge all readcodeaggregates
all_aggregate <- rbind(HIC_ReadCodeAggregates, DaSH_ReadCodeAggregates, Lothian_ReadCodeAggregates, Glasgow_ReadCodeAggregates)
all_aggregate <- all_aggregate[,c("code","recordCount")]
all_aggregate <- aggregate(all_aggregate$recordCount, by=list(Category=all_aggregate$code), FUN=sum)
colnames(all_aggregate) <- c("code", "recordCount")
#all4 percentage
lall4 <- Reduce(intersect, list(x$HIC,x$Glasgow,x$DataLoch,x$DaSH))
l <- lall4
sum(all_aggregate[all_aggregate[,"code"] %in% l,"recordCount"])/sum(all_aggregate[,"recordCount"])  #0.79
# three
lhdd <- Reduce(intersect, list(x$HIC,x$DataLoch,x$DaSH))
l <- setdiff(lhdd,lall4)
sum(all_aggregate[all_aggregate[,"code"] %in% l,"recordCount"])/sum(all_aggregate[,"recordCount"])  #0.072
lhgd <- Reduce(intersect, list(x$HIC,x$Glasgow,x$DaSH))
l <- setdiff(lhgd,lall4)
sum(all_aggregate[all_aggregate[,"code"] %in% l,"recordCount"])/sum(all_aggregate[,"recordCount"])  #0.0026
lhgl <- Reduce(intersect, list(x$HIC,x$Glasgow,x$DataLoch))
l <- setdiff(lhgl,lall4)
sum(all_aggregate[all_aggregate[,"code"] %in% l,"recordCount"])/sum(all_aggregate[,"recordCount"])  #0.00996
# two
lgl <- Reduce(intersect, list(x$Glasgow,x$DataLoch))
l <- setdiff(lgl,lall4)
l <- setdiff(l,lhgl)
sum(all_aggregate[all_aggregate[,"code"] %in% l,"recordCount"])/sum(all_aggregate[,"recordCount"])  #0.0024
lhd <- Reduce(intersect, list(x$HIC,x$DaSH))
l <- setdiff(lhd,lall4)
l <- setdiff(l,lhdd)
l <- setdiff(l,lhgd)
sum(all_aggregate[all_aggregate[,"code"] %in% l,"recordCount"])/sum(all_aggregate[,"recordCount"])  #0.0145
lhl <- Reduce(intersect, list(x$HIC,x$DataLoch))
l <- setdiff(lhl,lall4)
l <- setdiff(l,lhgl)
l <- setdiff(l,lhdd)
sum(all_aggregate[all_aggregate[,"code"] %in% l,"recordCount"])/sum(all_aggregate[,"recordCount"])  #0.00173
lhg <- Reduce(intersect, list(x$HIC,x$Glasgow))
l <- setdiff(lhg,lall4)
l <- setdiff(l,lhgd)
l <- setdiff(l,lhgl)
sum(all_aggregate[all_aggregate[,"code"] %in% l,"recordCount"])/sum(all_aggregate[,"recordCount"])  #0.0159
lld <- Reduce(intersect, list(x$DataLoch,x$DaSH))
l <- setdiff(lld,lall4)
l <- setdiff(l,lhdd)
sum(all_aggregate[all_aggregate[,"code"] %in% l,"recordCount"])/sum(all_aggregate[,"recordCount"])  #0.0047
#just one
l <- x$HIC
l <- l[!(l %in% x$Glasgow)]
l <- l[!(l %in% x$DataLoch)]
l <- l[!(l %in% x$DaSH)]
sum(all_aggregate[all_aggregate[,"code"] %in% l,"recordCount"])/sum(all_aggregate[,"recordCount"])  #0.0215
l <- x$Glasgow
l <- l[!(l %in% x$HIC)]
l <- l[!(l %in% x$DataLoch)]
l <- l[!(l %in% x$DaSH)]
sum(all_aggregate[all_aggregate[,"code"] %in% l,"recordCount"])/sum(all_aggregate[,"recordCount"])  #0.014
l <- x$DataLoch
l <- l[!(l %in% x$Glasgow)]
l <- l[!(l %in% x$HIC)]
l <- l[!(l %in% x$DaSH)]
sum(all_aggregate[all_aggregate[,"code"] %in% l,"recordCount"])/sum(all_aggregate[,"recordCount"])  #0.001
l <- x$DaSH
l <- l[!(l %in% x$Glasgow)]
l <- l[!(l %in% x$DataLoch)]
l <- l[!(l %in% x$HIC)]
sum(all_aggregate[all_aggregate[,"code"] %in% l,"recordCount"])/sum(all_aggregate[,"recordCount"])  #0.035
PLOT(TT)
plot(tt)
## clear the workspace ###################
rm(list = ls()); gc()
####### pre set up #######################
SHList <- c("HIC","Glasgow","Lothian","DaSH")
load("./data/selectedCodes.RData")
ReadCodeList <- selectedCodes
source("0_functions.R")
source("./R code for data harmonisation/0_functions.R")
con <- dbConnect(odbc(),
Driver = "SQL Server",
Server = "localhost\\SQLEXPRESS",
Database = "example",
UID = "examplelogin",
PWD = rstudioapi::askForPassword("Database password"),
TrustServerCertificate="Yes")
sample(1:1000,1000)
DaSH <- read.csv("~/GitHub/ScottishLabData/ExemplarTestData/DaSH.csv")
View(DaSH)
DaSH$prochi <- sample(3001:4000, 10000)
DaSH$prochi <- sample(3001:4000, 10000, replace=TRUE)
write.csv(DaSH, "DaSH.csv")
DataLoch <- read.csv("~/GitHub/ScottishLabData/ExemplarTestData/DataLoch.csv")
View(DataLoch)
DataLoch$prochi <- sample(1001:2000, 10000, replace = TRUE)
write.csv(DataLoch, "DataLoch.csv")
Glasgow <- read.csv("~/GitHub/ScottishLabData/ExemplarTestData/Glasgow.csv")
View(Glasgow)
Glasgow$prochi <- sample(2001:3000, 10000, replace = TRUE)
write.csv(Glasgow, "Glasgow.csv")
HIC <- read.csv("~/GitHub/ScottishLabData/ExemplarTestData/HIC.csv")
View(HIC)
HIC$prochi <- sample(1:1000, 10000, replace = TRUE)
write.csv(HIC, "HIC.csv")
